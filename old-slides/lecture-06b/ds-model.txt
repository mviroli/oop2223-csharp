## Sorts of data structures

+ Collection/Bag: general way to refer to data structures aimed at containing one or more elements, regardless of their order

+ List: a particular sort of collection storing an unlimited amount of items in an orderly fashion, possibly with repetition
    - items can be accessed via their index, i.e. their position in the list
    - items can be added at the beginning, or the ending of the list, as well as at a given position
    - items can be removed from any position
    - items can be enumerated in an orderly fashion

+ Array: a particular sort of list storing a fixed amount of items
    - arrays are usually allocated continously in memory

+ Queue: a particular sort of list only supporting FIFO access to its items
    - only the first item in the list can be read/taken
    - items in the list can only be appended, i.e. added at the end of the list

+ Stack: a particular sort of list only supporting LIFO access to its items
    - only the last item in the list can be read/taken
    - items in the list can only be appended, i.e. added at the end of the list

+ Deque: (= Stack + Queue) a particular sort of list only supporting LIFO or FIFO access to its items
    - only the last or the first items in the list can be read/taken
    - items in the list can only be added at the beginning or the ending of the list

+ Set: a particular sort of collection storing an unlimited amount of different items of the same type, regardless of their order
    - duplicates are not allowed
    - items can be enumerated with an unpredictable ordering
    - it is computationally easy to say if an item is in the set or not

+ Multi-Set: a particular sort of collection storing an unlimited amount of items of the same type, regardless of their order
    - duplicates are not allowed
    - items can be enumerated with an unpredictable ordering
    - it is computationally easy to compute how many copies of an item are in the multi-set

+ Dictionary/Map: a particular sort of collection storing an unlimited amount of items of the same type, indexed by keys of some other type
    - matematically, they represent a function from the set of admissible keys to the set of admissible values
    - each admissible key may correspond to at most 1 admissible value
    - the same value may correspond to several keys
    - items are added/retrieved by specifying their key
    - removing keys means removing items
    - adding an item to a pre-existing key means replacing the item

+ Multi-dimensional Arrays: can be conceived as maps of fixed size where the set of admissible keys consists of vectors of integers and keys cannot be removed or added

+ Tuple: a particular sort of list storing a fixed amount of items, where items in the same position are of the same type whereas items in different positions are of different types

## Operation modes for collections

Mutable collections -> each instance of the collection lets the pool of items it contains change, via the operation it supports
    - the effect of adding an item is that the collection contains one more item than before
    - the effect of removing an item is that the collection contains one less item than before
    - the effect of replacing an item is that the collection contains the same amount of items, but one of them may have changed identity

Immutable collections -> all instances of the collection do not let their pools of items change, under any circumstance
    - only reading items and creating novel instances of the collection is supported
    - one may add an item by creating a copy of the collection containing one more item
    - one may remove an item by creating a copy of the collection containing one less item
    - one may replace an item by creating a copy of the collection containing one different item